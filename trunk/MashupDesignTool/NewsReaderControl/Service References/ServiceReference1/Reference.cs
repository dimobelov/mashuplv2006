//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace NewsReaderControl.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ServiceReference1.MashupToolWCFService")]
    public interface MashupToolWCFService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:MashupToolWCFService/DoWork", ReplyAction="urn:MashupToolWCFService/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:MashupToolWCFService/GetStringFromURL", ReplyAction="urn:MashupToolWCFService/GetStringFromURLResponse")]
        System.IAsyncResult BeginGetStringFromURL(string url, System.AsyncCallback callback, object asyncState);
        
        string EndGetStringFromURL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:MashupToolWCFService/GetDataFromURL", ReplyAction="urn:MashupToolWCFService/GetDataFromURLResponse")]
        System.IAsyncResult BeginGetDataFromURL(string url, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetDataFromURL(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MashupToolWCFServiceChannel : NewsReaderControl.ServiceReference1.MashupToolWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStringFromURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStringFromURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataFromURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataFromURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MashupToolWCFServiceClient : System.ServiceModel.ClientBase<NewsReaderControl.ServiceReference1.MashupToolWCFService>, NewsReaderControl.ServiceReference1.MashupToolWCFService {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStringFromURLDelegate;
        
        private EndOperationDelegate onEndGetStringFromURLDelegate;
        
        private System.Threading.SendOrPostCallback onGetStringFromURLCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataFromURLDelegate;
        
        private EndOperationDelegate onEndGetDataFromURLDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataFromURLCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MashupToolWCFServiceClient() {
        }
        
        public MashupToolWCFServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MashupToolWCFServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MashupToolWCFServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MashupToolWCFServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<GetStringFromURLCompletedEventArgs> GetStringFromURLCompleted;
        
        public event System.EventHandler<GetDataFromURLCompletedEventArgs> GetDataFromURLCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NewsReaderControl.ServiceReference1.MashupToolWCFService.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void NewsReaderControl.ServiceReference1.MashupToolWCFService.EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((NewsReaderControl.ServiceReference1.MashupToolWCFService)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            ((NewsReaderControl.ServiceReference1.MashupToolWCFService)(this)).EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NewsReaderControl.ServiceReference1.MashupToolWCFService.BeginGetStringFromURL(string url, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStringFromURL(url, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string NewsReaderControl.ServiceReference1.MashupToolWCFService.EndGetStringFromURL(System.IAsyncResult result) {
            return base.Channel.EndGetStringFromURL(result);
        }
        
        private System.IAsyncResult OnBeginGetStringFromURL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string url = ((string)(inValues[0]));
            return ((NewsReaderControl.ServiceReference1.MashupToolWCFService)(this)).BeginGetStringFromURL(url, callback, asyncState);
        }
        
        private object[] OnEndGetStringFromURL(System.IAsyncResult result) {
            string retVal = ((NewsReaderControl.ServiceReference1.MashupToolWCFService)(this)).EndGetStringFromURL(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStringFromURLCompleted(object state) {
            if ((this.GetStringFromURLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStringFromURLCompleted(this, new GetStringFromURLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStringFromURLAsync(string url) {
            this.GetStringFromURLAsync(url, null);
        }
        
        public void GetStringFromURLAsync(string url, object userState) {
            if ((this.onBeginGetStringFromURLDelegate == null)) {
                this.onBeginGetStringFromURLDelegate = new BeginOperationDelegate(this.OnBeginGetStringFromURL);
            }
            if ((this.onEndGetStringFromURLDelegate == null)) {
                this.onEndGetStringFromURLDelegate = new EndOperationDelegate(this.OnEndGetStringFromURL);
            }
            if ((this.onGetStringFromURLCompletedDelegate == null)) {
                this.onGetStringFromURLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStringFromURLCompleted);
            }
            base.InvokeAsync(this.onBeginGetStringFromURLDelegate, new object[] {
                        url}, this.onEndGetStringFromURLDelegate, this.onGetStringFromURLCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NewsReaderControl.ServiceReference1.MashupToolWCFService.BeginGetDataFromURL(string url, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataFromURL(url, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] NewsReaderControl.ServiceReference1.MashupToolWCFService.EndGetDataFromURL(System.IAsyncResult result) {
            return base.Channel.EndGetDataFromURL(result);
        }
        
        private System.IAsyncResult OnBeginGetDataFromURL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string url = ((string)(inValues[0]));
            return ((NewsReaderControl.ServiceReference1.MashupToolWCFService)(this)).BeginGetDataFromURL(url, callback, asyncState);
        }
        
        private object[] OnEndGetDataFromURL(System.IAsyncResult result) {
            byte[] retVal = ((NewsReaderControl.ServiceReference1.MashupToolWCFService)(this)).EndGetDataFromURL(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataFromURLCompleted(object state) {
            if ((this.GetDataFromURLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataFromURLCompleted(this, new GetDataFromURLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataFromURLAsync(string url) {
            this.GetDataFromURLAsync(url, null);
        }
        
        public void GetDataFromURLAsync(string url, object userState) {
            if ((this.onBeginGetDataFromURLDelegate == null)) {
                this.onBeginGetDataFromURLDelegate = new BeginOperationDelegate(this.OnBeginGetDataFromURL);
            }
            if ((this.onEndGetDataFromURLDelegate == null)) {
                this.onEndGetDataFromURLDelegate = new EndOperationDelegate(this.OnEndGetDataFromURL);
            }
            if ((this.onGetDataFromURLCompletedDelegate == null)) {
                this.onGetDataFromURLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataFromURLCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataFromURLDelegate, new object[] {
                        url}, this.onEndGetDataFromURLDelegate, this.onGetDataFromURLCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override NewsReaderControl.ServiceReference1.MashupToolWCFService CreateChannel() {
            return new MashupToolWCFServiceClientChannel(this);
        }
        
        private class MashupToolWCFServiceClientChannel : ChannelBase<NewsReaderControl.ServiceReference1.MashupToolWCFService>, NewsReaderControl.ServiceReference1.MashupToolWCFService {
            
            public MashupToolWCFServiceClientChannel(System.ServiceModel.ClientBase<NewsReaderControl.ServiceReference1.MashupToolWCFService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DoWork", _args, result);
            }
            
            public System.IAsyncResult BeginGetStringFromURL(string url, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = url;
                System.IAsyncResult _result = base.BeginInvoke("GetStringFromURL", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetStringFromURL(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetStringFromURL", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDataFromURL(string url, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = url;
                System.IAsyncResult _result = base.BeginInvoke("GetDataFromURL", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetDataFromURL(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetDataFromURL", _args, result)));
                return _result;
            }
        }
    }
}
